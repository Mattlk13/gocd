import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.GithubArtifact
import com.thoughtworks.go.build.VerifyJarTask
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
  pluginsZipConfig
}

def dependencies = [
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-ldap-authentication-plugin',
    tagName: 'v2.3.0-381',
    asset: 'gocd-ldap-authentication-plugin-2.3.0-381.jar',
    checksum: '2ce1dde178d0738caed49cec55089551346102aeb37274de1b92ab662658ad2e'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-filebased-authentication-plugin',
    tagName: 'v2.2.0-298',
    asset: 'gocd-filebased-authentication-plugin-2.2.0-298.jar',
    checksum: 'b4e0f5eb27eb7ac8cfe732d80b9ae6ca441572cdb35809cd9340d517e0523dc8'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-yaml-config-plugin',
    tagName: 'v1.0.0-421',
    asset: 'yaml-config-plugin-1.0.0-421.jar',
    checksum: '7e7ac7da53d9475e4074abf23843765675c4a10c7765470bdbd80098dfb39c08'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-json-config-plugin',
    tagName: 'v1.0.0-271',
    asset: 'json-config-plugin-1.0.0-271.jar',
    checksum: '61877e025723c47a2c53bc088bb361a556dc4888cb34c995154a8b1df2e351d5'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-file-based-secrets-plugin',
    tagName: 'v1.2.0-306',
    asset: 'gocd-file-based-secrets-plugin-1.2.0-306.jar',
    checksum: '29a3c6ecc0a17f61d9ea30f2a20576d34db6360b0a1e32db06a4d155144b6fbf'
  )
]

task createVersionFile {
  def file = layout.buildDirectory.file("version.txt").get().asFile
  inputs.property('version', rootProject.version)
  inputs.property('gitRevision', rootProject.gitRevision)

  outputs.file file

  doLast {
    file.getParentFile().mkdirs()
    file.withWriter { out ->
      out.write("${rootProject.version} (${rootProject.gitRevision})")
    }
  }
}

task downloadPlugins {
}

task pluginsZip(type: Zip) {
  finalizedBy 'verifyPluginZip'

  archiveBaseName = 'plugins'
  dependsOn createVersionFile
  from(createVersionFile)

  from(dependencies.collect { dep -> destFile(dep) })
}

task verifyPluginZip(type: VerifyJarTask) {
  jarTask = pluginsZip

  expectedJars = [
    '/': dependencies.collect { dep -> "${dep.repo}.jar".toString() }
  ]
}

artifacts {
  pluginsZipConfig pluginsZip
}

dependencies.each { dep ->
  task "download-${dep.repo}"(type: DownloadFile) { downloadTask ->
    pluginsZip.dependsOn downloadTask
    downloadPlugins.dependsOn downloadTask
    downloadTask.src dep.downloadUrl
    downloadTask.dest destFile(dep)
    downloadTask.checksum = dep.checksum
  }

  pluginsZip.from(destFile(dep))
}

private File destFile(GithubArtifact dep) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(dep.downloadUrl)}/${dep.repo}.jar")
}

task prepare(dependsOn: pluginsZip)
