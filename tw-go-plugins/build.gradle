import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.GithubArtifact
import com.thoughtworks.go.build.VerifyJarTask
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
  pluginsZipConfig
}

def dependencies = [
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-ldap-authentication-plugin',
    tagName: 'v3.0.0-445',
    asset: 'gocd-ldap-authentication-plugin-3.0.0-445.jar',
    checksum: '538dd5714854fad83978a21e87a92640cda9eeed4f9e325dedb4a093166dab9f'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-filebased-authentication-plugin',
    tagName: 'v2.2.0-326',
    asset: 'gocd-filebased-authentication-plugin-2.2.0-326.jar',
    checksum: '7ca75aa5411f6dbaa5258160234b599bde60da46219b0641e6c6f4c5ac413d32'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-yaml-config-plugin',
    tagName: 'v1.0.0-449',
    asset: 'yaml-config-plugin-1.0.0-449.jar',
    checksum: '1f154d6f372f26bb23b6263c800ee8e9ee94941b94a7101ff7a8cf6b8300d304'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-json-config-plugin',
    tagName: 'v1.0.0-297',
    asset: 'json-config-plugin-1.0.0-297.jar',
    checksum: 'a10290898c089a6ed5a49f4f07d610cd9194934e5753dd80541b4421e0e51e92'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-file-based-secrets-plugin',
    tagName: 'v1.2.0-362',
    asset: 'gocd-file-based-secrets-plugin-1.2.0-362.jar',
    checksum: 'a68b8380e1f43332bb2a7e0cae5523ca989f8279da3e32390ca29f451d4ab068'
  )
]

tasks.register('createVersionFile') {
  def file = layout.buildDirectory.file("version.txt").get().asFile
  inputs.property('version', rootProject.version)
  inputs.property('gitRevision', rootProject.gitRevision)

  outputs.file file

  doLast {
    file.getParentFile().mkdirs()
    file.withWriter { out ->
      out.write("${rootProject.version} (${rootProject.gitRevision})")
    }
  }
}

def downloadPlugins = tasks.register('downloadPlugins')

def pluginsZip = tasks.register('pluginsZip', Zip) {
  finalizedBy 'verifyPluginZip'

  archiveBaseName = 'plugins'
  dependsOn createVersionFile
  from(createVersionFile)

  from(dependencies.collect { dep -> destFile(dep) })
}

tasks.register('verifyPluginZip', VerifyJarTask) {
  jarTask = pluginsZip
  expectedJars = [
    '/': dependencies.collect { dep -> "${dep.repo}.jar".toString() }
  ]
}

artifacts {
  pluginsZipConfig pluginsZip
}

dependencies.each { dep ->
  def downloadTask = tasks.register("download-${dep.repo}", DownloadFile) { downloadTask ->
    downloadTask.src dep.downloadUrl
    downloadTask.dest destFile(dep)
    downloadTask.checksum = dep.checksum
  }

  downloadPlugins.configure {
    dependsOn downloadTask
  }

  pluginsZip.configure { Zip zipTask ->
    zipTask.dependsOn downloadTask
    zipTask.from(destFile(dep))
  }
}

private File destFile(GithubArtifact dep) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(dep.downloadUrl)}/${dep.repo}.jar")
}

tasks.register('prepare') { dependsOn pluginsZip }
