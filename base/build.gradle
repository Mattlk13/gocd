import com.thoughtworks.go.build.GoVersions

/*
 * Copyright Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'GoCD Base'

dependencies {
  // Make BouncyCastle essentially an optional dependency. If you use GoAgentServerClientBuilder, you'll need it.
  compileOnly project.deps.bouncyCastle
  compileOnly project.deps.bouncyCastlePkix

  api project.deps.slf4jApi

  api(project.deps.apacheHttpComponents) {
    exclude(module: 'commons-codec')
  }
  if (project.deps.apacheHttpComponents) {
    implementation project.deps.slf4jJcl // Allow commons-logging replacement
  }

  compileOnly project.deps.logback
  testImplementation project.deps.logback

  compileOnly project.deps.jetBrainsAnnotations

  testRuntimeOnly project.deps.bouncyCastle
  testRuntimeOnly project.deps.bouncyCastlePkix
  testImplementation project(path: ':test:test-utils', configuration: 'runtimeElements')
  testImplementation project.deps.junit5Api
  testRuntimeOnly project.deps.junit5Engine
  testRuntimeOnly project.deps.junit5PlatformLauncher
  testImplementation project.deps.systemStubs
  testImplementation project.deps.mockitoCore
  testImplementation project.deps.assertJ
}

def generatedResourcesOutput = file("resources-generated")
def generatedResourcesInput = file('resource-templates')

sourceSets {
  main {
    resources {
      output.dir generatedResourcesOutput, builtBy: 'generateResources'
      srcDirs += generatedResourcesOutput
    }
  }
}

clean {
  delete(generatedResourcesOutput)
}

tasks.register('generateResources', Copy) {
  inputs.dir(generatedResourcesInput)
  outputs.dir(generatedResourcesOutput)

  def goVersions = project.goVersions as GoVersions
  def props = [
    'goVersion'    : goVersions.goVersion,
    'distVersion'  : goVersions.distVersion,
    'fullVersion'  : goVersions.fullVersion,
    'gitRevision'  : goVersions.gitRevision,
  ]
  inputs.properties(props)

  doFirst {
    delete(generatedResourcesOutput)
    generatedResourcesOutput.mkdirs()
  }

  into generatedResourcesOutput
  from(generatedResourcesInput) {
    expand(props)
  }
}
licenseMain.dependsOn generateResources
processResources.dependsOn generateResources

tasks.register('prepare') {
  dependsOn generateResources
}
